/**
 * @file rover.h
 *
 * @brief This header file was generated by cantools version 40.2.1 Tue May  6 10:48:44 2025.
 *
 * @copyright Copyright (c) 2018-2019 Erik Moqvist
 *
 * @par License
 * The MIT License (MIT)
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use, copy,
 * modify, merge, publish, distribute, sublicense, and/or sell copies
 * of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

#ifndef ROVER_H
#define ROVER_H

#ifdef __cplusplus
extern "C" {
#endif

#include <stdint.h>
#include <stdbool.h>
#include <stddef.h>

#ifndef EINVAL
#    define EINVAL 22
#endif

/* Frame ids. */
#define ROVER_ROVER_HEARTBEAT_FRAME_ID (0x00u)
#define ROVER_DEVICE_BROADCAST_FRAME_ID (0x01u)
#define ROVER_DRIVE_SET_SPEEDS_FRAME_ID (0x10u)
#define ROVER_DRIVE_SET_LED_FRAME_ID (0x11u)
#define ROVER_DRIVE_SET_SWIVEL_FRAME_ID (0x12u)
#define ROVER_DRIVE_LED_FRAME_ID (0x17u)
#define ROVER_DRIVE_APPLIED_OUTPUT_FRAME_ID (0x15u)
#define ROVER_DRIVE_BATTERY_FRAME_ID (0x16u)
#define ROVER_DRIVE_SWIVEL_FRAME_ID (0x18u)
#define ROVER_DRIVE_MOTOR_DATA_FRAME_ID (0x19u)
#define ROVER_RELAY_SET_STATE_FRAME_ID (0x20u)
#define ROVER_RELAY_STATE_FRAME_ID (0x25u)
#define ROVER_ARM_SET_MOTOR_FRAME_ID (0x30u)
#define ROVER_ARM_MOTOR_MOVE_DATA_FRAME_ID (0x35u)
#define ROVER_ARM_MOTOR_STEP_DATA_FRAME_ID (0x36u)
#define ROVER_ARM_MOTOR_ANGLE_DATA_FRAME_ID (0x37u)
#define ROVER_ARM_SYSTEM_ACTION_FRAME_ID (0x31u)

/* Frame lengths in bytes. */
#define ROVER_ROVER_HEARTBEAT_LENGTH (1u)
#define ROVER_DEVICE_BROADCAST_LENGTH (2u)
#define ROVER_DRIVE_SET_SPEEDS_LENGTH (7u)
#define ROVER_DRIVE_SET_LED_LENGTH (1u)
#define ROVER_DRIVE_SET_SWIVEL_LENGTH (7u)
#define ROVER_DRIVE_LED_LENGTH (1u)
#define ROVER_DRIVE_APPLIED_OUTPUT_LENGTH (6u)
#define ROVER_DRIVE_BATTERY_LENGTH (6u)
#define ROVER_DRIVE_SWIVEL_LENGTH (6u)
#define ROVER_DRIVE_MOTOR_DATA_LENGTH (8u)
#define ROVER_RELAY_SET_STATE_LENGTH (2u)
#define ROVER_RELAY_STATE_LENGTH (1u)
#define ROVER_ARM_SET_MOTOR_LENGTH (8u)
#define ROVER_ARM_MOTOR_MOVE_DATA_LENGTH (2u)
#define ROVER_ARM_MOTOR_STEP_DATA_LENGTH (7u)
#define ROVER_ARM_MOTOR_ANGLE_DATA_LENGTH (5u)
#define ROVER_ARM_SYSTEM_ACTION_LENGTH (1u)

/* Extended or standard frame types. */
#define ROVER_ROVER_HEARTBEAT_IS_EXTENDED (0)
#define ROVER_DEVICE_BROADCAST_IS_EXTENDED (0)
#define ROVER_DRIVE_SET_SPEEDS_IS_EXTENDED (0)
#define ROVER_DRIVE_SET_LED_IS_EXTENDED (0)
#define ROVER_DRIVE_SET_SWIVEL_IS_EXTENDED (0)
#define ROVER_DRIVE_LED_IS_EXTENDED (0)
#define ROVER_DRIVE_APPLIED_OUTPUT_IS_EXTENDED (0)
#define ROVER_DRIVE_BATTERY_IS_EXTENDED (0)
#define ROVER_DRIVE_SWIVEL_IS_EXTENDED (0)
#define ROVER_DRIVE_MOTOR_DATA_IS_EXTENDED (0)
#define ROVER_RELAY_SET_STATE_IS_EXTENDED (0)
#define ROVER_RELAY_STATE_IS_EXTENDED (0)
#define ROVER_ARM_SET_MOTOR_IS_EXTENDED (0)
#define ROVER_ARM_MOTOR_MOVE_DATA_IS_EXTENDED (0)
#define ROVER_ARM_MOTOR_STEP_DATA_IS_EXTENDED (0)
#define ROVER_ARM_MOTOR_ANGLE_DATA_IS_EXTENDED (0)
#define ROVER_ARM_SYSTEM_ACTION_IS_EXTENDED (0)

/* Frame cycle times in milliseconds. */


/* Signal choices. */


/* Frame Names. */
#define ROVER_ROVER_HEARTBEAT_NAME "Rover_Heartbeat"
#define ROVER_DEVICE_BROADCAST_NAME "Device_Broadcast"
#define ROVER_DRIVE_SET_SPEEDS_NAME "Drive_Set_Speeds"
#define ROVER_DRIVE_SET_LED_NAME "Drive_SetLED"
#define ROVER_DRIVE_SET_SWIVEL_NAME "Drive_SetSwivel"
#define ROVER_DRIVE_LED_NAME "Drive_LED"
#define ROVER_DRIVE_APPLIED_OUTPUT_NAME "Drive_Applied_Output"
#define ROVER_DRIVE_BATTERY_NAME "Drive_Battery"
#define ROVER_DRIVE_SWIVEL_NAME "Drive_Swivel"
#define ROVER_DRIVE_MOTOR_DATA_NAME "Drive_Motor_Data"
#define ROVER_RELAY_SET_STATE_NAME "Relay_Set_State"
#define ROVER_RELAY_STATE_NAME "Relay_State"
#define ROVER_ARM_SET_MOTOR_NAME "Arm_Set_Motor"
#define ROVER_ARM_MOTOR_MOVE_DATA_NAME "Arm_Motor_Move_Data"
#define ROVER_ARM_MOTOR_STEP_DATA_NAME "Arm_Motor_Step_Data"
#define ROVER_ARM_MOTOR_ANGLE_DATA_NAME "Arm_Motor_Angle_Data"
#define ROVER_ARM_SYSTEM_ACTION_NAME "Arm_System_Action"

/* Signal Names. */
#define ROVER_ROVER_HEARTBEAT_ROVER_STATUS_NAME "Rover_Status"
#define ROVER_DEVICE_BROADCAST_DEVICE_VALUE_NAME "Device_Value"
#define ROVER_DEVICE_BROADCAST_FW_VERSION_MAJOR_NAME "FW_Version_Major"
#define ROVER_DEVICE_BROADCAST_FW_VERSION_MINOR_NAME "FW_Version_Minor"
#define ROVER_DRIVE_SET_SPEEDS_SHOULD_SET_LEFT_NAME "Should_Set_Left"
#define ROVER_DRIVE_SET_SPEEDS_SHOULD_SET_RIGHT_NAME "Should_Set_Right"
#define ROVER_DRIVE_SET_SPEEDS_SHOULD_SET_THROTTLE_NAME "Should_Set_Throttle"
#define ROVER_DRIVE_SET_SPEEDS_LEFT_SPEED_NAME "Left_Speed"
#define ROVER_DRIVE_SET_SPEEDS_RIGHT_SPEED_NAME "Right_Speed"
#define ROVER_DRIVE_SET_SPEEDS_THROTTLE_NAME "Throttle"
#define ROVER_DRIVE_SET_LED_COLOR_NAME "Color"
#define ROVER_DRIVE_SET_LED_BLINK_NAME "Blink"
#define ROVER_DRIVE_SET_SWIVEL_SET_FRONT_SWIVEL_NAME "Set_Front_Swivel"
#define ROVER_DRIVE_SET_SWIVEL_SET_FRONT_TILT_NAME "Set_Front_Tilt"
#define ROVER_DRIVE_SET_SWIVEL_SET_REAR_SWIVEL_NAME "Set_Rear_Swivel"
#define ROVER_DRIVE_SET_SWIVEL_SET_REAR_TILT_NAME "Set_Rear_Tilt"
#define ROVER_DRIVE_SET_SWIVEL_FRONT_SWIVEL_NAME "Front_Swivel"
#define ROVER_DRIVE_SET_SWIVEL_FRONT_TILT_NAME "Front_Tilt"
#define ROVER_DRIVE_SET_SWIVEL_REAR_SWIVEL_NAME "Rear_Swivel"
#define ROVER_DRIVE_SET_SWIVEL_REAR_TILT_NAME "Rear_Tilt"
#define ROVER_DRIVE_LED_COLOR_NAME "Color"
#define ROVER_DRIVE_LED_BLINK_NAME "Blink"
#define ROVER_DRIVE_APPLIED_OUTPUT_THROTTLE_NAME "Throttle"
#define ROVER_DRIVE_APPLIED_OUTPUT_LEFT_SPEED_NAME "Left_Speed"
#define ROVER_DRIVE_APPLIED_OUTPUT_RIGHT_SPEED_NAME "Right_Speed"
#define ROVER_DRIVE_BATTERY_VOLTAGE_NAME "Voltage"
#define ROVER_DRIVE_BATTERY_TEMPERATURE_NAME "Temperature"
#define ROVER_DRIVE_BATTERY_CURRENT_NAME "Current"
#define ROVER_DRIVE_SWIVEL_FRONT_SWIVEL_NAME "Front_Swivel"
#define ROVER_DRIVE_SWIVEL_FRONT_TILT_NAME "Front_Tilt"
#define ROVER_DRIVE_SWIVEL_REAR_SWIVEL_NAME "Rear_Swivel"
#define ROVER_DRIVE_SWIVEL_REAR_TILT_NAME "Rear_Tilt"
#define ROVER_DRIVE_MOTOR_DATA_MOTOR_VALUE_NAME "Motor_Value"
#define ROVER_DRIVE_MOTOR_DATA_MOTOR_POSITION_NAME "Motor_Position"
#define ROVER_DRIVE_MOTOR_DATA_MOTOR_SPEED_NAME "Motor_Speed"
#define ROVER_DRIVE_MOTOR_DATA_MOTOR_CURRENT_NAME "Motor_Current"
#define ROVER_DRIVE_MOTOR_DATA_MOTOR_TEMPERATURE_NAME "Motor_Temperature"
#define ROVER_RELAY_SET_STATE_UPDATE_FRONT_LEFT_MOTOR_NAME "Update_Front_Left_Motor"
#define ROVER_RELAY_SET_STATE_FRONT_LEFT_MOTOR_NAME "Front_Left_Motor"
#define ROVER_RELAY_SET_STATE_UPDATE_FRONT_RIGHT_MOTOR_NAME "Update_Front_Right_Motor"
#define ROVER_RELAY_SET_STATE_FRONT_RIGHT_MOTOR_NAME "Front_Right_Motor"
#define ROVER_RELAY_SET_STATE_UPDATE_BACK_LEFT_MOTOR_NAME "Update_Back_Left_Motor"
#define ROVER_RELAY_SET_STATE_BACK_LEFT_MOTOR_NAME "Back_Left_Motor"
#define ROVER_RELAY_SET_STATE_UPDATE_BACK_RIGHT_MOTOR_NAME "Update_Back_Right_Motor"
#define ROVER_RELAY_SET_STATE_BACK_RIGHT_MOTOR_NAME "Back_Right_Motor"
#define ROVER_RELAY_SET_STATE_UPDATE_ARM_NAME "Update_Arm"
#define ROVER_RELAY_SET_STATE_ARM_NAME "Arm"
#define ROVER_RELAY_SET_STATE_UPDATE_SCIENCE_NAME "Update_Science"
#define ROVER_RELAY_SET_STATE_SCIENCE_NAME "Science"
#define ROVER_RELAY_SET_STATE_UPDATE_DRIVE_NAME "Update_Drive"
#define ROVER_RELAY_SET_STATE_DRIVE_NAME "Drive"
#define ROVER_RELAY_STATE_FRONT_LEFT_MOTOR_NAME "Front_Left_Motor"
#define ROVER_RELAY_STATE_FRONT_RIGHT_MOTOR_NAME "Front_Right_Motor"
#define ROVER_RELAY_STATE_BACK_LEFT_MOTOR_NAME "Back_Left_Motor"
#define ROVER_RELAY_STATE_BACK_RIGHT_MOTOR_NAME "Back_Right_Motor"
#define ROVER_RELAY_STATE_DRIVE_NAME "Drive"
#define ROVER_RELAY_STATE_ARM_NAME "Arm"
#define ROVER_RELAY_STATE_SCIENCE_NAME "Science"
#define ROVER_RELAY_STATE_PHYSICAL_OVERRIDE_NAME "Physical_Override"
#define ROVER_ARM_SET_MOTOR_MOTOR_VALUE_NAME "Motor_Value"
#define ROVER_ARM_SET_MOTOR_MOVE_STEPS_NAME "Move_Steps"
#define ROVER_ARM_SET_MOTOR_MOVE_RADIANS_NAME "Move_Radians"
#define ROVER_ARM_SET_MOTOR_ANGLE_NAME "Angle"
#define ROVER_ARM_MOTOR_MOVE_DATA_MOTOR_VALUE_NAME "Motor_Value"
#define ROVER_ARM_MOTOR_MOVE_DATA_IS_MOVING_NAME "Is_Moving"
#define ROVER_ARM_MOTOR_MOVE_DATA_IS_LIMIT_SWITCH_PRESSED_NAME "Is_Limit_Switch_Pressed"
#define ROVER_ARM_MOTOR_MOVE_DATA_MOTOR_DIRECTION_NAME "Motor_Direction"
#define ROVER_ARM_MOTOR_STEP_DATA_MOTOR_VALUE_NAME "Motor_Value"
#define ROVER_ARM_MOTOR_STEP_DATA_CURRENT_STEP_NAME "Current_Step"
#define ROVER_ARM_MOTOR_STEP_DATA_TARGET_STEP_NAME "Target_Step"
#define ROVER_ARM_MOTOR_ANGLE_DATA_MOTOR_VALUE_NAME "Motor_Value"
#define ROVER_ARM_MOTOR_ANGLE_DATA_CURRENT_ANGLE_NAME "Current_Angle"
#define ROVER_ARM_MOTOR_ANGLE_DATA_TARGET_ANGLE_NAME "Target_Angle"
#define ROVER_ARM_SYSTEM_ACTION_STOP_NAME "Stop"
#define ROVER_ARM_SYSTEM_ACTION_CALIBRATE_NAME "Calibrate"
#define ROVER_ARM_SYSTEM_ACTION_JAB_NAME "Jab"

/**
 * Signals in message Rover_Heartbeat.
 *
 * Heartbeat sent from the rover
 *
 * All signal values are as on the CAN bus.
 */
struct rover_rover_heartbeat_t {
    /**
     * Range: 0..5 (0..5 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t rover_status : 4;
};

/**
 * Signals in message Device_Broadcast.
 *
 * Device broadcast message
 *
 * All signal values are as on the CAN bus.
 */
struct rover_device_broadcast_t {
    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t device_value : 5;

    /**
     * Range: 0..8 (0..8 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t fw_version_major : 4;

    /**
     * Range: 0..8 (0..8 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t fw_version_minor : 4;
};

/**
 * Signals in message Drive_Set_Speeds.
 *
 * Set Drive Speeds
 *
 * All signal values are as on the CAN bus.
 */
struct rover_drive_set_speeds_t {
    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t should_set_left : 1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t should_set_right : 1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t should_set_throttle : 1;

    /**
     * Range: -16129..16129 (-1..1 -)
     * Scale: 6.2e-05
     * Offset: 0
     */
    int16_t left_speed : 16;

    /**
     * Range: -16129..16129 (-1..1 -)
     * Scale: 6.2e-05
     * Offset: 0
     */
    int16_t right_speed : 16;

    /**
     * Range: 0..62500 (0..1 -)
     * Scale: 1.6e-05
     * Offset: 0
     */
    uint16_t throttle : 16;
};

/**
 * Signals in message Drive_SetLED.
 *
 * Command to set the Drive LED color
 *
 * All signal values are as on the CAN bus.
 */
struct rover_drive_set_led_t {
    /**
     * Range: 0..8 (0..8 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t color : 4;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t blink : 1;
};

/**
 * Signals in message Drive_SetSwivel.
 *
 * Command to set the swivel angles of drive
 *
 * All signal values are as on the CAN bus.
 */
struct rover_drive_set_swivel_t {
    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t set_front_swivel : 1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t set_front_tilt : 1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t set_rear_swivel : 1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t set_rear_tilt : 1;

    /**
     * Range: -2045..2045 (-90..90 °)
     * Scale: 0.044
     * Offset: 0
     */
    int16_t front_swivel : 12;

    /**
     * Range: -2045..2045 (-90..90 °)
     * Scale: 0.044
     * Offset: 0
     */
    int16_t front_tilt : 12;

    /**
     * Range: -2045..2045 (-90..90 °)
     * Scale: 0.044
     * Offset: 0
     */
    int16_t rear_swivel : 12;

    /**
     * Range: -2045..2045 (-90..90 °)
     * Scale: 0.044
     * Offset: 0
     */
    int16_t rear_tilt : 12;
};

/**
 * Signals in message Drive_LED.
 *
 * Command to set the LED color on the Drive board
 *
 * All signal values are as on the CAN bus.
 */
struct rover_drive_led_t {
    /**
     * Range: 0..8 (0..8 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t color : 4;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t blink : 1;
};

/**
 * Signals in message Drive_Applied_Output.
 *
 * The applied output of the drive motors
 *
 * All signal values are as on the CAN bus.
 */
struct rover_drive_applied_output_t {
    /**
     * Range: 0..62500 (0..1 -)
     * Scale: 1.6e-05
     * Offset: 0
     */
    uint16_t throttle : 16;

    /**
     * Range: -16129..16129 (-1..1 -)
     * Scale: 6.2e-05
     * Offset: 0
     */
    int16_t left_speed : 16;

    /**
     * Range: -16129..16129 (-1..1 -)
     * Scale: 6.2e-05
     * Offset: 0
     */
    int16_t right_speed : 16;
};

/**
 * Signals in message Drive_Battery.
 *
 * Information about the battery and current draw
 *
 * All signal values are as on the CAN bus.
 */
struct rover_drive_battery_t {
    /**
     * Range: 0..65455 (0..36 V)
     * Scale: 0.00055
     * Offset: 0
     */
    uint16_t voltage : 16;

    /**
     * Range: -1000..1111 (-40..150 C)
     * Scale: 0.09
     * Offset: 50
     */
    int16_t temperature : 12;

    /**
     * Range: 0..300 (0..30 A)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t current : 16;
};

/**
 * Signals in message Drive_Swivel.
 *
 * Data from the drive board about the swivel angles
 *
 * All signal values are as on the CAN bus.
 */
struct rover_drive_swivel_t {
    /**
     * Range: -2045..2045 (-90..90 °)
     * Scale: 0.044
     * Offset: 0
     */
    int16_t front_swivel : 12;

    /**
     * Range: -2045..2045 (-90..90 °)
     * Scale: 0.044
     * Offset: 0
     */
    int16_t front_tilt : 12;

    /**
     * Range: -2045..2045 (-90..90 °)
     * Scale: 0.044
     * Offset: 0
     */
    int16_t rear_swivel : 12;

    /**
     * Range: -2045..2045 (-90..90 °)
     * Scale: 0.044
     * Offset: 0
     */
    int16_t rear_tilt : 12;
};

/**
 * Signals in message Drive_Motor_Data.
 *
 * Data from an individual drive motor
 *
 * All signal values are as on the CAN bus.
 */
struct rover_drive_motor_data_t {
    /**
     * Range: 0..6 (0..6 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t motor_value : 3;

    /**
     * Range: -32000..32000 (-3200..3200 °)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t motor_position : 16;

    /**
     * Range: -32000..32000 (-320000..320000 RPM)
     * Scale: 10
     * Offset: 0
     */
    int16_t motor_speed : 16;

    /**
     * Range: -6000..6000 (-60..60 A)
     * Scale: 0.01
     * Offset: 0
     */
    int16_t motor_current : 16;

    /**
     * Range: -20..127 (-20..127 °C)
     * Scale: 1
     * Offset: 0
     */
    int8_t motor_temperature : 8;
};

/**
 * Signals in message Relay_Set_State.
 *
 * Command to set the state of the relays
 *
 * All signal values are as on the CAN bus.
 */
struct rover_relay_set_state_t {
    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t update_front_left_motor : 1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t front_left_motor : 1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t update_front_right_motor : 1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t front_right_motor : 1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t update_back_left_motor : 1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t back_left_motor : 1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t update_back_right_motor : 1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t back_right_motor : 1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t update_arm : 1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t arm : 1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t update_science : 1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t science : 1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t update_drive : 1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t drive : 1;
};

/**
 * Signals in message Relay_State.
 *
 * Data from the relay about the relay state
 *
 * All signal values are as on the CAN bus.
 */
struct rover_relay_state_t {
    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t front_left_motor : 1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t front_right_motor : 1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t back_left_motor : 1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t back_right_motor : 1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t drive : 1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t arm : 1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t science : 1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t physical_override : 1;
};

/**
 * Signals in message Arm_Set_Motor.
 *
 * Command to operate a specific arm motor
 *
 * All signal values are as on the CAN bus.
 */
struct rover_arm_set_motor_t {
    /**
     * Which motor to operate this command on
     *
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t motor_value : 3;

    /**
     * How many steps to move the motor
     *
     * Range: -8388608..8388608 (-8388608..8388608 -)
     * Scale: 1
     * Offset: 0
     */
    int32_t move_steps : 24;

    /**
     * The amount of radians to move the motor
     *
     * Range: -32767..32767 (-3.1415..3.1415 -)
     * Scale: 9.58738e-05
     * Offset: 0
     */
    int16_t move_radians : 16;

    /**
     * The angle in radians to set the motor position to
     *
     * Range: -32767..-32767 (-3.1415..-3.1415 -)
     * Scale: 9.58738e-05
     * Offset: 0
     */
    int16_t angle : 16;
};

/**
 * Signals in message Arm_Motor_Move_Data.
 *
 * Movement data from an arm motor
 *
 * All signal values are as on the CAN bus.
 */
struct rover_arm_motor_move_data_t {
    /**
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t motor_value : 3;

    /**
     * Range: 0..2 (0..2 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t is_moving : 2;

    /**
     * Range: 0..2 (0..2 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t is_limit_switch_pressed : 2;

    /**
     * Range: 0..9 (0..9 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t motor_direction : 4;
};

/**
 * Signals in message Arm_Motor_Step_Data.
 *
 * Step data from an arm motor
 *
 * All signal values are as on the CAN bus.
 */
struct rover_arm_motor_step_data_t {
    /**
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t motor_value : 3;

    /**
     * Range: -33554432..33554432 (-33554432..33554432 -)
     * Scale: 1
     * Offset: 0
     */
    int32_t current_step : 26;

    /**
     * Range: -33554432..3355443208 (-33554432..3355443208 -)
     * Scale: 1
     * Offset: 0
     */
    int32_t target_step : 26;
};

/**
 * Signals in message Arm_Motor_Angle_Data.
 *
 * Angle data from an arm motor
 *
 * All signal values are as on the CAN bus.
 */
struct rover_arm_motor_angle_data_t {
    /**
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t motor_value : 3;

    /**
     * Range: -32768..32768 (-3.14159..3.14159 -)
     * Scale: 9.587379e-05
     * Offset: 0
     */
    int16_t current_angle : 16;

    /**
     * Range: -32768..32768 (-3.14159..3.14159 -)
     * Scale: 9.587379e-05
     * Offset: 0
     */
    int16_t target_angle : 16;
};

/**
 * Signals in message Arm_System_Action.
 *
 * All signal values are as on the CAN bus.
 */
struct rover_arm_system_action_t {
    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t stop : 1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t calibrate : 1;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t jab : 1;
};

/**
 * Pack message Rover_Heartbeat.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int rover_rover_heartbeat_pack(
    uint8_t *dst_p,
    const struct rover_rover_heartbeat_t *src_p,
    size_t size);

/**
 * Unpack message Rover_Heartbeat.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int rover_rover_heartbeat_unpack(
    struct rover_rover_heartbeat_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Rover_Heartbeat.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int rover_rover_heartbeat_init(struct rover_rover_heartbeat_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t rover_rover_heartbeat_rover_status_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float rover_rover_heartbeat_rover_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool rover_rover_heartbeat_rover_status_is_in_range(uint8_t value);

/**
 * Pack message Device_Broadcast.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int rover_device_broadcast_pack(
    uint8_t *dst_p,
    const struct rover_device_broadcast_t *src_p,
    size_t size);

/**
 * Unpack message Device_Broadcast.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int rover_device_broadcast_unpack(
    struct rover_device_broadcast_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Device_Broadcast.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int rover_device_broadcast_init(struct rover_device_broadcast_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t rover_device_broadcast_device_value_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float rover_device_broadcast_device_value_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool rover_device_broadcast_device_value_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t rover_device_broadcast_fw_version_major_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float rover_device_broadcast_fw_version_major_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool rover_device_broadcast_fw_version_major_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t rover_device_broadcast_fw_version_minor_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float rover_device_broadcast_fw_version_minor_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool rover_device_broadcast_fw_version_minor_is_in_range(uint8_t value);

/**
 * Pack message Drive_Set_Speeds.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int rover_drive_set_speeds_pack(
    uint8_t *dst_p,
    const struct rover_drive_set_speeds_t *src_p,
    size_t size);

/**
 * Unpack message Drive_Set_Speeds.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int rover_drive_set_speeds_unpack(
    struct rover_drive_set_speeds_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Drive_Set_Speeds.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int rover_drive_set_speeds_init(struct rover_drive_set_speeds_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t rover_drive_set_speeds_should_set_left_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float rover_drive_set_speeds_should_set_left_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool rover_drive_set_speeds_should_set_left_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t rover_drive_set_speeds_should_set_right_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float rover_drive_set_speeds_should_set_right_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool rover_drive_set_speeds_should_set_right_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t rover_drive_set_speeds_should_set_throttle_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float rover_drive_set_speeds_should_set_throttle_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool rover_drive_set_speeds_should_set_throttle_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t rover_drive_set_speeds_left_speed_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float rover_drive_set_speeds_left_speed_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool rover_drive_set_speeds_left_speed_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t rover_drive_set_speeds_right_speed_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float rover_drive_set_speeds_right_speed_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool rover_drive_set_speeds_right_speed_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t rover_drive_set_speeds_throttle_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float rover_drive_set_speeds_throttle_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool rover_drive_set_speeds_throttle_is_in_range(uint16_t value);

/**
 * Pack message Drive_SetLED.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int rover_drive_set_led_pack(
    uint8_t *dst_p,
    const struct rover_drive_set_led_t *src_p,
    size_t size);

/**
 * Unpack message Drive_SetLED.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int rover_drive_set_led_unpack(
    struct rover_drive_set_led_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Drive_SetLED.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int rover_drive_set_led_init(struct rover_drive_set_led_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t rover_drive_set_led_color_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float rover_drive_set_led_color_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool rover_drive_set_led_color_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t rover_drive_set_led_blink_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float rover_drive_set_led_blink_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool rover_drive_set_led_blink_is_in_range(uint8_t value);

/**
 * Pack message Drive_SetSwivel.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int rover_drive_set_swivel_pack(
    uint8_t *dst_p,
    const struct rover_drive_set_swivel_t *src_p,
    size_t size);

/**
 * Unpack message Drive_SetSwivel.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int rover_drive_set_swivel_unpack(
    struct rover_drive_set_swivel_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Drive_SetSwivel.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int rover_drive_set_swivel_init(struct rover_drive_set_swivel_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t rover_drive_set_swivel_set_front_swivel_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float rover_drive_set_swivel_set_front_swivel_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool rover_drive_set_swivel_set_front_swivel_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t rover_drive_set_swivel_set_front_tilt_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float rover_drive_set_swivel_set_front_tilt_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool rover_drive_set_swivel_set_front_tilt_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t rover_drive_set_swivel_set_rear_swivel_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float rover_drive_set_swivel_set_rear_swivel_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool rover_drive_set_swivel_set_rear_swivel_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t rover_drive_set_swivel_set_rear_tilt_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float rover_drive_set_swivel_set_rear_tilt_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool rover_drive_set_swivel_set_rear_tilt_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t rover_drive_set_swivel_front_swivel_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float rover_drive_set_swivel_front_swivel_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool rover_drive_set_swivel_front_swivel_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t rover_drive_set_swivel_front_tilt_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float rover_drive_set_swivel_front_tilt_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool rover_drive_set_swivel_front_tilt_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t rover_drive_set_swivel_rear_swivel_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float rover_drive_set_swivel_rear_swivel_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool rover_drive_set_swivel_rear_swivel_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t rover_drive_set_swivel_rear_tilt_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float rover_drive_set_swivel_rear_tilt_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool rover_drive_set_swivel_rear_tilt_is_in_range(int16_t value);

/**
 * Pack message Drive_LED.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int rover_drive_led_pack(
    uint8_t *dst_p,
    const struct rover_drive_led_t *src_p,
    size_t size);

/**
 * Unpack message Drive_LED.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int rover_drive_led_unpack(
    struct rover_drive_led_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Drive_LED.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int rover_drive_led_init(struct rover_drive_led_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t rover_drive_led_color_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float rover_drive_led_color_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool rover_drive_led_color_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t rover_drive_led_blink_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float rover_drive_led_blink_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool rover_drive_led_blink_is_in_range(uint8_t value);

/**
 * Pack message Drive_Applied_Output.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int rover_drive_applied_output_pack(
    uint8_t *dst_p,
    const struct rover_drive_applied_output_t *src_p,
    size_t size);

/**
 * Unpack message Drive_Applied_Output.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int rover_drive_applied_output_unpack(
    struct rover_drive_applied_output_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Drive_Applied_Output.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int rover_drive_applied_output_init(struct rover_drive_applied_output_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t rover_drive_applied_output_throttle_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float rover_drive_applied_output_throttle_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool rover_drive_applied_output_throttle_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t rover_drive_applied_output_left_speed_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float rover_drive_applied_output_left_speed_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool rover_drive_applied_output_left_speed_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t rover_drive_applied_output_right_speed_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float rover_drive_applied_output_right_speed_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool rover_drive_applied_output_right_speed_is_in_range(int16_t value);

/**
 * Pack message Drive_Battery.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int rover_drive_battery_pack(
    uint8_t *dst_p,
    const struct rover_drive_battery_t *src_p,
    size_t size);

/**
 * Unpack message Drive_Battery.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int rover_drive_battery_unpack(
    struct rover_drive_battery_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Drive_Battery.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int rover_drive_battery_init(struct rover_drive_battery_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t rover_drive_battery_voltage_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float rover_drive_battery_voltage_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool rover_drive_battery_voltage_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t rover_drive_battery_temperature_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float rover_drive_battery_temperature_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool rover_drive_battery_temperature_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t rover_drive_battery_current_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float rover_drive_battery_current_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool rover_drive_battery_current_is_in_range(uint16_t value);

/**
 * Pack message Drive_Swivel.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int rover_drive_swivel_pack(
    uint8_t *dst_p,
    const struct rover_drive_swivel_t *src_p,
    size_t size);

/**
 * Unpack message Drive_Swivel.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int rover_drive_swivel_unpack(
    struct rover_drive_swivel_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Drive_Swivel.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int rover_drive_swivel_init(struct rover_drive_swivel_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t rover_drive_swivel_front_swivel_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float rover_drive_swivel_front_swivel_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool rover_drive_swivel_front_swivel_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t rover_drive_swivel_front_tilt_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float rover_drive_swivel_front_tilt_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool rover_drive_swivel_front_tilt_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t rover_drive_swivel_rear_swivel_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float rover_drive_swivel_rear_swivel_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool rover_drive_swivel_rear_swivel_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t rover_drive_swivel_rear_tilt_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float rover_drive_swivel_rear_tilt_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool rover_drive_swivel_rear_tilt_is_in_range(int16_t value);

/**
 * Pack message Drive_Motor_Data.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int rover_drive_motor_data_pack(
    uint8_t *dst_p,
    const struct rover_drive_motor_data_t *src_p,
    size_t size);

/**
 * Unpack message Drive_Motor_Data.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int rover_drive_motor_data_unpack(
    struct rover_drive_motor_data_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Drive_Motor_Data.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int rover_drive_motor_data_init(struct rover_drive_motor_data_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t rover_drive_motor_data_motor_value_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float rover_drive_motor_data_motor_value_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool rover_drive_motor_data_motor_value_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t rover_drive_motor_data_motor_position_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float rover_drive_motor_data_motor_position_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool rover_drive_motor_data_motor_position_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t rover_drive_motor_data_motor_speed_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float rover_drive_motor_data_motor_speed_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool rover_drive_motor_data_motor_speed_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t rover_drive_motor_data_motor_current_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float rover_drive_motor_data_motor_current_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool rover_drive_motor_data_motor_current_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t rover_drive_motor_data_motor_temperature_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float rover_drive_motor_data_motor_temperature_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool rover_drive_motor_data_motor_temperature_is_in_range(int8_t value);

/**
 * Pack message Relay_Set_State.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int rover_relay_set_state_pack(
    uint8_t *dst_p,
    const struct rover_relay_set_state_t *src_p,
    size_t size);

/**
 * Unpack message Relay_Set_State.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int rover_relay_set_state_unpack(
    struct rover_relay_set_state_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Relay_Set_State.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int rover_relay_set_state_init(struct rover_relay_set_state_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t rover_relay_set_state_update_front_left_motor_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float rover_relay_set_state_update_front_left_motor_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool rover_relay_set_state_update_front_left_motor_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t rover_relay_set_state_front_left_motor_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float rover_relay_set_state_front_left_motor_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool rover_relay_set_state_front_left_motor_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t rover_relay_set_state_update_front_right_motor_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float rover_relay_set_state_update_front_right_motor_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool rover_relay_set_state_update_front_right_motor_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t rover_relay_set_state_front_right_motor_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float rover_relay_set_state_front_right_motor_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool rover_relay_set_state_front_right_motor_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t rover_relay_set_state_update_back_left_motor_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float rover_relay_set_state_update_back_left_motor_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool rover_relay_set_state_update_back_left_motor_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t rover_relay_set_state_back_left_motor_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float rover_relay_set_state_back_left_motor_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool rover_relay_set_state_back_left_motor_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t rover_relay_set_state_update_back_right_motor_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float rover_relay_set_state_update_back_right_motor_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool rover_relay_set_state_update_back_right_motor_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t rover_relay_set_state_back_right_motor_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float rover_relay_set_state_back_right_motor_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool rover_relay_set_state_back_right_motor_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t rover_relay_set_state_update_arm_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float rover_relay_set_state_update_arm_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool rover_relay_set_state_update_arm_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t rover_relay_set_state_arm_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float rover_relay_set_state_arm_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool rover_relay_set_state_arm_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t rover_relay_set_state_update_science_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float rover_relay_set_state_update_science_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool rover_relay_set_state_update_science_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t rover_relay_set_state_science_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float rover_relay_set_state_science_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool rover_relay_set_state_science_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t rover_relay_set_state_update_drive_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float rover_relay_set_state_update_drive_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool rover_relay_set_state_update_drive_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t rover_relay_set_state_drive_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float rover_relay_set_state_drive_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool rover_relay_set_state_drive_is_in_range(uint8_t value);

/**
 * Pack message Relay_State.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int rover_relay_state_pack(
    uint8_t *dst_p,
    const struct rover_relay_state_t *src_p,
    size_t size);

/**
 * Unpack message Relay_State.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int rover_relay_state_unpack(
    struct rover_relay_state_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Relay_State.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int rover_relay_state_init(struct rover_relay_state_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t rover_relay_state_front_left_motor_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float rover_relay_state_front_left_motor_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool rover_relay_state_front_left_motor_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t rover_relay_state_front_right_motor_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float rover_relay_state_front_right_motor_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool rover_relay_state_front_right_motor_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t rover_relay_state_back_left_motor_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float rover_relay_state_back_left_motor_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool rover_relay_state_back_left_motor_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t rover_relay_state_back_right_motor_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float rover_relay_state_back_right_motor_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool rover_relay_state_back_right_motor_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t rover_relay_state_drive_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float rover_relay_state_drive_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool rover_relay_state_drive_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t rover_relay_state_arm_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float rover_relay_state_arm_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool rover_relay_state_arm_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t rover_relay_state_science_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float rover_relay_state_science_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool rover_relay_state_science_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t rover_relay_state_physical_override_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float rover_relay_state_physical_override_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool rover_relay_state_physical_override_is_in_range(uint8_t value);

/**
 * Pack message Arm_Set_Motor.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int rover_arm_set_motor_pack(
    uint8_t *dst_p,
    const struct rover_arm_set_motor_t *src_p,
    size_t size);

/**
 * Unpack message Arm_Set_Motor.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int rover_arm_set_motor_unpack(
    struct rover_arm_set_motor_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Arm_Set_Motor.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int rover_arm_set_motor_init(struct rover_arm_set_motor_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t rover_arm_set_motor_motor_value_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float rover_arm_set_motor_motor_value_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool rover_arm_set_motor_motor_value_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int32_t rover_arm_set_motor_move_steps_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float rover_arm_set_motor_move_steps_decode(int32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool rover_arm_set_motor_move_steps_is_in_range(int32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t rover_arm_set_motor_move_radians_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float rover_arm_set_motor_move_radians_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool rover_arm_set_motor_move_radians_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t rover_arm_set_motor_angle_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float rover_arm_set_motor_angle_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool rover_arm_set_motor_angle_is_in_range(int16_t value);

/**
 * Pack message Arm_Motor_Move_Data.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int rover_arm_motor_move_data_pack(
    uint8_t *dst_p,
    const struct rover_arm_motor_move_data_t *src_p,
    size_t size);

/**
 * Unpack message Arm_Motor_Move_Data.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int rover_arm_motor_move_data_unpack(
    struct rover_arm_motor_move_data_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Arm_Motor_Move_Data.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int rover_arm_motor_move_data_init(struct rover_arm_motor_move_data_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t rover_arm_motor_move_data_motor_value_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float rover_arm_motor_move_data_motor_value_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool rover_arm_motor_move_data_motor_value_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t rover_arm_motor_move_data_is_moving_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float rover_arm_motor_move_data_is_moving_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool rover_arm_motor_move_data_is_moving_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t rover_arm_motor_move_data_is_limit_switch_pressed_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float rover_arm_motor_move_data_is_limit_switch_pressed_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool rover_arm_motor_move_data_is_limit_switch_pressed_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t rover_arm_motor_move_data_motor_direction_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float rover_arm_motor_move_data_motor_direction_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool rover_arm_motor_move_data_motor_direction_is_in_range(uint8_t value);

/**
 * Pack message Arm_Motor_Step_Data.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int rover_arm_motor_step_data_pack(
    uint8_t *dst_p,
    const struct rover_arm_motor_step_data_t *src_p,
    size_t size);

/**
 * Unpack message Arm_Motor_Step_Data.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int rover_arm_motor_step_data_unpack(
    struct rover_arm_motor_step_data_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Arm_Motor_Step_Data.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int rover_arm_motor_step_data_init(struct rover_arm_motor_step_data_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t rover_arm_motor_step_data_motor_value_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float rover_arm_motor_step_data_motor_value_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool rover_arm_motor_step_data_motor_value_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int32_t rover_arm_motor_step_data_current_step_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float rover_arm_motor_step_data_current_step_decode(int32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool rover_arm_motor_step_data_current_step_is_in_range(int32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int32_t rover_arm_motor_step_data_target_step_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float rover_arm_motor_step_data_target_step_decode(int32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool rover_arm_motor_step_data_target_step_is_in_range(int32_t value);

/**
 * Pack message Arm_Motor_Angle_Data.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int rover_arm_motor_angle_data_pack(
    uint8_t *dst_p,
    const struct rover_arm_motor_angle_data_t *src_p,
    size_t size);

/**
 * Unpack message Arm_Motor_Angle_Data.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int rover_arm_motor_angle_data_unpack(
    struct rover_arm_motor_angle_data_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Arm_Motor_Angle_Data.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int rover_arm_motor_angle_data_init(struct rover_arm_motor_angle_data_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t rover_arm_motor_angle_data_motor_value_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float rover_arm_motor_angle_data_motor_value_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool rover_arm_motor_angle_data_motor_value_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t rover_arm_motor_angle_data_current_angle_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float rover_arm_motor_angle_data_current_angle_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool rover_arm_motor_angle_data_current_angle_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t rover_arm_motor_angle_data_target_angle_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float rover_arm_motor_angle_data_target_angle_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool rover_arm_motor_angle_data_target_angle_is_in_range(int16_t value);

/**
 * Pack message Arm_System_Action.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int rover_arm_system_action_pack(
    uint8_t *dst_p,
    const struct rover_arm_system_action_t *src_p,
    size_t size);

/**
 * Unpack message Arm_System_Action.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int rover_arm_system_action_unpack(
    struct rover_arm_system_action_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from Arm_System_Action.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int rover_arm_system_action_init(struct rover_arm_system_action_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t rover_arm_system_action_stop_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float rover_arm_system_action_stop_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool rover_arm_system_action_stop_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t rover_arm_system_action_calibrate_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float rover_arm_system_action_calibrate_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool rover_arm_system_action_calibrate_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t rover_arm_system_action_jab_encode(float value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
float rover_arm_system_action_jab_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool rover_arm_system_action_jab_is_in_range(uint8_t value);


#ifdef __cplusplus
}
#endif

#endif
